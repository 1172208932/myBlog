{"version":3,"sources":["bundle.js","App.js","index.js"],"names":["Direction","defaultSnakeIntLists","type","direction","x","y","id","GameConfig","config","mapWidthNum","mapHeightNum","barrierNum","boxWidth","frameNumRate","snakeIntLists","this","GameControl","Right","snakeArr","barrierArrs","Array","fill","initSeen","seen","Set","forEach","itemArr","index","item","index2","add","from","Math","floor","random","size","num","addBarrier","initSnake","delete","GDispatcher","dispatchEvent","arrs","point","getOneSeen","pointArr","split","Number","nextpoint","getnextSnakePos","filter","length","state","unshift","barrierItem","pop","Left","Up","Down","obj","resObj","gameState","GameStage","arguments","_snakeSpriteList","addEventListener","setBarriers","setSnake","addSorce","gameOver","Event","ENTER_FRAME","onEnterFrame","_barriers","_map","_frameNum","initMap","_gameControl","beginGame","console","log","TextureCache","map","itemBox","Graphics","beginFill","drawRect","endFill","addChild","data","sprite","destroy","element","train","Sprite","anchorTexture","set","texture","transform","rotation","PI","scale","ObservablePoint","push","update","img","setconfig","props","_setup","payload","start","stop","init","setDirection","removeEventListener","emitEvent","WidgetBase","Snake","metaConfig","App","useState","widgetVisible","setWidgetVisible","widgetRef","useRef","onClickButton","current","className","onClick","e","ref","widgetFactory","onEvent","onReady","widget","onAssetsProcess","loaded","total","onAssetsComplete","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86537c1a.chunk.js","sourcesContent":["import { GDispatcher, WidgetBase, Event, TextureCache, Graphics, Sprite, ObservablePoint } from 'spark-wrapper-fyge';\nimport metaConfig from './meta.json';\n\nvar Direction;\n(function (Direction) {\n    Direction[\"Up\"] = \"up\";\n    Direction[\"Down\"] = \"down\";\n    Direction[\"Left\"] = \"left\";\n    Direction[\"Right\"] = \"right\";\n})(Direction || (Direction = {}));\n\n/*\n* 游戏初始化配置;\n*/\nconst defaultSnakeIntLists = [{\n        type: 'head',\n        direction: 'right',\n        x: 2,\n        y: 1,\n        id: \"2 1\"\n    }, {\n        type: 'body',\n        direction: 'right',\n        x: 1,\n        y: 1,\n        id: \"2 1\"\n    }, {\n        type: 'body',\n        direction: 'right',\n        x: 0,\n        y: 1,\n        id: \"2 1\"\n    }];\nclass GameConfig {\n    constructor() { }\n    static setconfig(config) {\n        const { mapWidthNum, mapHeightNum, barrierNum, boxWidth, frameNumRate, snakeIntLists } = config;\n        this.mapWidthNum = mapWidthNum || 18;\n        this.mapHeightNum = mapHeightNum || 18;\n        this.barrierNum = barrierNum || 3;\n        this.boxWidth = boxWidth || 35;\n        this.frameNumRate = frameNumRate || 30;\n        this.snakeIntLists = snakeIntLists || defaultSnakeIntLists;\n    }\n    static initSnake() {\n        this.snakeIntLists = [{\n                type: 'head',\n                direction: 'right',\n                x: 2,\n                y: 1,\n                id: \"2 1\"\n            }, {\n                type: 'body',\n                direction: 'right',\n                x: 1,\n                y: 1,\n                id: \"2 1\"\n            }, {\n                type: 'body',\n                direction: 'right',\n                x: 0,\n                y: 1,\n                id: \"2 1\"\n            }];\n    }\n}\n\nclass GameControl {\n    constructor() {\n        this.direction = Direction.Right;\n        /** 记录蛇的数组 */\n        this.snakeArr = [];\n        /** 障碍物存储的数组 */\n        this.barrierArrs = new Array(GameConfig.barrierNum).fill(null);\n        this.initSeen();\n    }\n    /**\n     * 初始化seen数据。\n     */\n    initSeen() {\n        this.seen = new Set();\n        let map = new Array(GameConfig.mapWidthNum).fill(new Array(GameConfig.mapHeightNum).fill(null));\n        map.forEach((itemArr, index) => {\n            itemArr.forEach((item, index2) => {\n                this.seen.add(index + ' ' + index2);\n            });\n        });\n    }\n    /**\n     * 随机获取seen中的一个点。\n     *   * @returns {string} 可以生成的食物的点。\n     */\n    getOneSeen() {\n        let list = Array.from(this.seen);\n        let randomIndex = Math.floor(Math.random() * Math.floor(this.seen.size));\n        return list[randomIndex];\n    }\n    /**\n     * 开始游戏。\n     */\n    beginGame() {\n        let num = GameConfig.barrierNum;\n        while (num) {\n            this.addBarrier(num - 1);\n            num--;\n        }\n        this.initSnake();\n    }\n    /**\n     * 初始化蛇的位置以及长度。\n     */\n    initSnake() {\n        this.snakeArr = GameConfig.snakeIntLists;\n        this.snakeArr.forEach((item) => {\n            this.seen.delete(item.id);\n        });\n        GDispatcher.dispatchEvent('SHOW_SNAKE', {\n            arrs: this.snakeArr\n        });\n    }\n    /**\n     * 从Set中,随机生成一个食物。\n     * @param {number} index 食物存放在数组中，数组下标。\n     */\n    addBarrier(index) {\n        if (this.seen.size === 0) {\n            return;\n        }\n        let point = this.getOneSeen();\n        let pointArr = point.split(\" \");\n        let x = Number(pointArr[0]);\n        let y = Number(pointArr[1]);\n        const id = point;\n        this.seen.delete(point);\n        this.barrierArrs[index];\n        this.barrierArrs[index] = {\n            index, x, y, id\n        };\n        //view展示\n        GDispatcher.dispatchEvent('INIT_BARRIERS', {\n            index, x: x * GameConfig.boxWidth, y: y * GameConfig.boxWidth\n        });\n    }\n    /**\n     * 游戏主要逻辑，每次更新蛇前进。\n     * 以及生成食物的逻辑\n     */\n    update() {\n        //蛇头变为蛇身\n        this.snakeArr[0].type = 'body';\n        let nextpoint = this.getnextSnakePos(this.snakeArr[0]);\n        nextpoint.direction = this.direction;\n        //下个点变为蛇头\n        nextpoint.type = 'head';\n        //判断碰没碰到蛇身，碰到则游戏结束\n        let snakeItem = this.snakeArr.filter(item => (item === null || item === void 0 ? void 0 : item.id) === nextpoint.id);\n        if (snakeItem.length !== 0) {\n            GameControl.state = 'die';\n            GDispatcher.dispatchEvent('GAME_OVER');\n            return;\n        }\n        //添加蛇头\n        this.seen.delete(nextpoint.id);\n        this.snakeArr.unshift(nextpoint);\n        //判断是否碰到食物，没碰到则推出蛇尾\n        let barrierItem = this.barrierArrs.filter(item => (item === null || item === void 0 ? void 0 : item.id) === nextpoint.id);\n        if (barrierItem.length !== 0) {\n            this.barrierArrs[barrierItem[0].index] = null;\n            this.addBarrier(barrierItem[0].index);\n            GDispatcher.dispatchEvent('ADD_SORCE');\n        }\n        else {\n            let item = this.snakeArr.pop();\n            this.seen.add(item.id);\n        }\n        //更新蛇view\n        GDispatcher.dispatchEvent('SHOW_SNAKE', {\n            arrs: this.snakeArr\n        });\n    }\n    /**\n     * 设置蛇前行方向。\n     * 不能相反设置。\n     * @param {string} direction 方向。\n     */\n    setDirection(direction) {\n        if (this.direction === Direction.Right && direction === Direction.Left) {\n            return;\n        }\n        if (this.direction === Direction.Left && direction === Direction.Right) {\n            return;\n        }\n        if (this.direction === Direction.Up && direction === Direction.Down) {\n            return;\n        }\n        if (this.direction === Direction.Down && direction === Direction.Up) {\n            return;\n        }\n        this.direction = direction;\n    }\n    /**\n     * 根据当前蛇首，获取贪吃蛇下个蛇首的点。\n     * @param {T } obj 当前蛇首点位对象。\n     * @returns {T } 下个蛇首点位对象。\n     */\n    getnextSnakePos(obj) {\n        let { x, y } = obj;\n        let resObj = {\n            x, y, id: ''\n        };\n        switch (this.direction) {\n            case Direction.Up:\n                resObj.y = (y - 1) % GameConfig.mapHeightNum;\n                if (y === 0) {\n                    resObj.y = GameConfig.mapHeightNum - 1;\n                }\n                break;\n            case Direction.Right:\n                resObj.x = (x + 1) % GameConfig.mapWidthNum;\n                break;\n            case Direction.Down:\n                resObj.y = (y + 1) % GameConfig.mapHeightNum;\n                break;\n            case Direction.Left:\n                resObj.x = (x - 1) % GameConfig.mapWidthNum;\n                if (x === 0) {\n                    resObj.x = GameConfig.mapHeightNum - 1;\n                }\n                break;\n        }\n        resObj.id = resObj.x + ' ' + resObj.y;\n        return resObj;\n    }\n}\n/** alive(活着) die(死亡) */\nGameControl.state = 'alive';\nGameControl.gameState = 'stop';\n\n/**\n * 贪吃蛇\n */\nclass GameStage extends WidgetBase {\n    constructor() {\n        super(...arguments);\n        /** 蛇的sprite数组 */\n        this._snakeSpriteList = [];\n    }\n    _setup() {\n        GDispatcher.addEventListener('INIT_BARRIERS', this.setBarriers, this);\n        GDispatcher.addEventListener('SHOW_SNAKE', this.setSnake, this);\n        GDispatcher.addEventListener('ADD_SORCE', this.addSorce, this);\n        GDispatcher.addEventListener('GAME_OVER', this.gameOver, this);\n        this.addEventListener(Event.ENTER_FRAME, this.onEnterFrame, this);\n        /** 游戏初始化配置; */\n        this._barriers = new Array(GameConfig.barrierNum).fill(null);\n        this._map = new Array(GameConfig.mapWidthNum).fill(new Array(GameConfig.mapHeightNum).fill(0));\n        this._frameNum = GameConfig.frameNumRate;\n        this.initMap(this._map);\n        this._gameControl = new GameControl();\n        this._gameControl.beginGame();\n        console.log(TextureCache, 'TextureCache');\n    }\n    /**\n     * 根据数据渲染地图。\n     * @param {Array} map 地图二维数组。\n     */\n    initMap(map) {\n        map.forEach((itemArr, index) => {\n            itemArr.forEach((item, index2) => {\n                let itemBox = new Graphics();\n                itemBox.beginFill(0x000000, 0.3);\n                itemBox.drawRect(index2 * GameConfig.boxWidth, index * GameConfig.boxWidth, GameConfig.boxWidth, GameConfig.boxWidth);\n                itemBox.endFill();\n                this.addChild(itemBox);\n            });\n        });\n    }\n    /**\n     * 根据数据渲染蛇。\n     * @param {object} obj 通信Event，蛇的数组数据挂在data上。\n     */\n    setSnake(obj) {\n        const { arrs } = obj.data;\n        this._snakeSpriteList.map(sprite => {\n            sprite.destroy();\n        });\n        this._snakeSpriteList = [];\n        arrs.forEach(element => {\n            let train = new Sprite();\n            train.x = element.x * GameConfig.boxWidth + GameConfig.boxWidth / 2;\n            train.y = element.y * GameConfig.boxWidth + GameConfig.boxWidth / 2;\n            train.anchorTexture.set(0.5, 0.5);\n            if (element.type === \"head\") {\n                train.texture = TextureCache['trainhead'];\n            }\n            else {\n                train.texture = TextureCache['trainbody'];\n            }\n            switch (element.direction) {\n                case Direction.Up:\n                    train.transform.rotation = Math.PI * 3 / 2;\n                    train.transform.scale = new ObservablePoint(() => { }, this, 1, -1);\n                    break;\n                case Direction.Right:\n                    break;\n                case Direction.Down:\n                    train.transform.rotation = Math.PI / 2;\n                    break;\n                case Direction.Left:\n                    train.transform.scale = new ObservablePoint(() => { }, this, -1, 1);\n                    break;\n            }\n            this._snakeSpriteList.push(train);\n            this.addChild(train);\n        });\n    }\n    /**\n     * 多少帧更新一次（60为1秒）\n     */\n    onEnterFrame() {\n        if (GameControl.state !== 'alive' || GameControl.gameState !== 'begin') {\n            return;\n        }\n        this._frameNum--;\n        if (this._frameNum === 0) {\n            this._frameNum = GameConfig.frameNumRate;\n            this._gameControl.update();\n        }\n    }\n    /**\n     * 渲染食物\n     */\n    setBarriers(obj) {\n        const { x, y, index } = obj.data;\n        if (this._barriers[index] !== null) {\n            this._barriers[index].destroy();\n            this._barriers[index] = null;\n        }\n        let img = new Sprite();\n        img.x = x;\n        img.y = y;\n        img.texture = TextureCache['food'];\n        this._barriers[index] = img;\n        this.addChild(img);\n    }\n    onLaunched() {\n        GameConfig.setconfig(this.props.config);\n        this._setup();\n    }\n    /**\n     * 事件回调\n     * @param type\n     * @param payload\n     */\n    onEvent(type, payload) {\n        switch (type) {\n            case 'game-start':\n                this.start();\n                break;\n            case 'game-stop':\n                this.stop();\n                break;\n            case 'game-init':\n                this.init();\n                break;\n            case 'up':\n            case 'right':\n            case 'down':\n            case 'left':\n                this._gameControl.setDirection(type);\n                break;\n        }\n    }\n    /**\n     * 销毁回调\n     */\n    onDestroy() {\n        this.stop();\n        GDispatcher.removeEventListener('INIT_BARRIERS', this.setBarriers, this);\n        GDispatcher.removeEventListener('SHOW_SNAKE', this.setSnake, this);\n        GDispatcher.removeEventListener('ADD_SORCE', this.addSorce, this);\n        GDispatcher.removeEventListener('GAME_OVER', this.gameOver, this);\n    }\n    start() {\n        GameControl.gameState = 'begin';\n    }\n    stop() {\n        GameControl.gameState = 'stop';\n    }\n    init() {\n        GameControl.state = 'alive';\n        GameConfig.initSnake();\n        this._gameControl.initSnake();\n    }\n    addSorce() {\n        this.emitEvent('ADD_SORCE');\n    }\n    gameOver() {\n        this.emitEvent('GAME_OVER');\n    }\n}\n\n/**\n * Created by rockyl on 2020/9/19.\n */\n/**\n * Snake模块\n * @description Snake模块的工厂方法\n * @ctype CANVAS_WIDGET\n */\nfunction Snake() {\n    return new GameStage(getMetaConfig('Snake'));\n}\nfunction getMetaConfig(id){\n\treturn metaConfig[id]\n}\n//===== END APPEND CODE =====\n\nexport { Snake };\n","import React, {useState, useRef} from 'react';\nimport './App.scss';\nimport {CanvasWidget} from '@spark/ui';\nimport {Snake} from \"./bundle\";\n\nfunction App() {\n\tconst [widgetVisible, setWidgetVisible] = useState(false);\n\tconst widgetRef = useRef();\n\n\tfunction onReady(widget) {\n\t\tconsole.log('CanvasWidget ready!')\n\t}\n\n\t/**\n\t * 事件回调\n\t */\n\tfunction onEvent(type, payload) {\n\t\tconsole.log(type, payload);\n\t}\n\n\tfunction onAssetsProcess(loaded, total) {\n\t\tconsole.log(`assets load process:${loaded}/${total}`)\n\t}\n\n\tfunction onAssetsComplete() {\n\t\tconsole.log(`assets load complete`)\n\t}\n\n\tfunction onClickButton(type) {\n\t\tswitch (type) {\n\t\t\tcase 'setup':\n\t\t\t\tsetWidgetVisible(true);\n\t\t\t\tbreak;\n\t\t\tcase 'unSetup':\n\t\t\t\tsetWidgetVisible(false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\twidgetRef.current.emitEvent(type)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"control-bar\">\n\t\t\t<button onClick={e => onClickButton('up')}>up</button>\n\t\t\t\t<button onClick={e => onClickButton('right')}>right</button>\n\t\t\t\t<button onClick={e => onClickButton('down')}>down</button>\n\t\t\t\t<button onClick={e => onClickButton('left')}>left</button>\n\t\t\t\t<button onClick={e => onClickButton('setup')}>setup</button>\n\t\t\t\t<button onClick={e => onClickButton('unSetup')}>unSetup</button>\n\n\t\t\t\t<button onClick={e => onClickButton('game-start')}>start</button>\n\t\t\t\t<button onClick={e => onClickButton('game-stop')}>stop</button>\n\t\t\t</div>\n\t\t\t{\n\t\t\t\twidgetVisible ? <CanvasWidget ref={widgetRef} className=\"canvas-widget\" widgetFactory={Snake}\n\t\t\t\t                              onEvent={onEvent}\n\t\t\t\t                              onReady={onReady} onAssetsProcess={onAssetsProcess}\n\t\t\t\t                              onAssetsComplete={onAssetsComplete}/> : null\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}