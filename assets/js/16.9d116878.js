(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{383:function(v,_,t){"use strict";t.r(_);var a=t(48),l=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"vuerouter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vuerouter"}},[v._v("#")]),v._v(" VueRouter")]),v._v(" "),t("ol",[t("li",[v._v("vue router 从列表 浏览了一段时间 , 点击进了一个详情页, 然后返回的时候, 我期望回到列表页还是停留在原来的浏览位置, 你可以怎么做?")])]),v._v(" "),t("ul",[t("li",[v._v("keep-alive")]),v._v(" "),t("li",[v._v("localStorage/sessionStorage + scrollTop +  scrollTo")]),v._v(" "),t("li",[v._v("scrollBehavior")])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("router-view是什么?")])]),v._v(" "),t("p",[v._v("类似于动态的组件.")]),v._v(" "),t("p",[v._v("找到当前路径对应的component, 并展示出来.")]),v._v(" "),t("ol",[t("li",[v._v("异步加载about.vue")])]),v._v(" "),t("p",[v._v("首屏 app.js chunk-vendors 2.4MB 159kB\nAbout about.js 21kB")]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("同步加载about.vue")])]),v._v(" "),t("p",[v._v("首屏 app.js chunk-vendors 2.4MB 180KB\nAbout")]),v._v(" "),t("h3",{attrs:{id:"导航守卫的执行顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导航守卫的执行顺序"}},[v._v("#")]),v._v(" 导航守卫的执行顺序")]),v._v(" "),t("ol",[t("li",[v._v("[组件] 前一个组件的beforeRouteLeave")]),v._v(" "),t("li",[v._v("[全局] router.beforeEach")]),v._v(" "),t("li",[v._v("[路由参数变化] beforeRouteUpdate")]),v._v(" "),t("li",[v._v("[配置文件里] beforeEnter")]),v._v(" "),t("li",[v._v("[组件] beforeRouteEnter")]),v._v(" "),t("li",[v._v("[全局] afterEach")])]),v._v(" "),t("h3",{attrs:{id:"scollbehavior生效的条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scollbehavior生效的条件"}},[v._v("#")]),v._v(" scollBehavior生效的条件")]),v._v(" "),t("ol",[t("li",[v._v("浏览器支持的History api")]),v._v(" "),t("li",[v._v("点击浏览器的返回/前进按钮")]),v._v(" "),t("li",[v._v("router-link是不可以触发的")])]),v._v(" "),t("h2",{attrs:{id:"vue-路由及异步组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-路由及异步组件"}},[v._v("#")]),v._v(" Vue 路由及异步组件")]),v._v(" "),t("h3",{attrs:{id:"背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[v._v("#")]),v._v(" 背景")]),v._v(" "),t("p",[v._v("ssr")]),v._v(" "),t("p",[v._v("www.lubai.com/index => php服务器 => index.html\n/parent => php服务器 => parent.html")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[v._v("        location.href = xxxx/parent;\n")])])]),t("p",[v._v("php 服务端代码 -> jquery ->")]),v._v(" "),t("p",[v._v("服务器渲染的多页应用")]),v._v(" "),t("p",[v._v("缺点：")]),v._v(" "),t("ol",[t("li",[v._v("维护特别麻烦")]),v._v(" "),t("li",[v._v("服务器压力大")]),v._v(" "),t("li",[v._v("没有前后端分离, 协作流程不清晰")])]),v._v(" "),t("p",[v._v("优点:")]),v._v(" "),t("ol",[t("li",[v._v("SEO效果好, 因为是已经完全渲染好的页面")]),v._v(" "),t("li",[v._v("用户看到首屏的耗时会比较小.")])]),v._v(" "),t("p",[v._v("现在的前端状况, 其实是有点从服务端渲染的多页 -> 单页应用 -> ssr")]),v._v(" "),t("h3",{attrs:{id:"现阶段的路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#现阶段的路由"}},[v._v("#")]),v._v(" 现阶段的路由")]),v._v(" "),t("p",[v._v("单页应用 spa")]),v._v(" "),t("p",[v._v("不仅在页面的交互中是不刷新页面的, 就连页面跳转(router.push)也是不刷新页面.")]),v._v(" "),t("p",[v._v("www.lubai.com/index => cdn => index.html app.js\nwww.lubai.com/list => cdn => list.js")]),v._v(" "),t("p",[v._v("webpack => 将静态文件.js img html .css 上传到oss => cdn")]),v._v(" "),t("h3",{attrs:{id:"前端路由的特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端路由的特性"}},[v._v("#")]),v._v(" 前端路由的特性")]),v._v(" "),t("ol",[t("li",[v._v("根据不同的url渲染不同的内容")]),v._v(" "),t("li",[v._v("不刷新页面")])]),v._v(" "),t("h3",{attrs:{id:"hash路由原理及其实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash路由原理及其实现"}},[v._v("#")]),v._v(" Hash路由原理及其实现")]),v._v(" "),t("ol",[t("li",[v._v("面试")])]),v._v(" "),t("ul",[t("li",[v._v("hash路由的改变, 会在url上有什么表现吗\n"),t("ul",[t("li",[v._v("会添加#path")])])]),v._v(" "),t("li",[v._v("如何通过js监听hash路由改变呢?\n"),t("ul",[t("li",[v._v("window.addEventlistener('hashchange', function(){})")])])]),v._v(" "),t("li",[v._v("所以可以通过哪些方式来改变浏览器hash\n"),t("ul",[t("li",[v._v("a标签")]),v._v(" "),t("li",[v._v("js location.hash=''")])])])]),v._v(" "),t("ol",[t("li",[v._v("特性")])]),v._v(" "),t("ul",[t("li",[v._v("url中的hash值至少客户端/浏览器端的一种状态, 向服务器发送请求的时候, hash部分是不会携带的")]),v._v(" "),t("li",[v._v("hash值的更改, 并不会导致页面的刷新")]),v._v(" "),t("li",[v._v("hash值的更改, 会在浏览器的访问历史中增加记录, 我们可以通过浏览器的回退、前进按钮来控制hash的切换")]),v._v(" "),t("li",[v._v("hash值的更改, 通过hashchange事件")])]),v._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[v._v("例子")])]),v._v(" "),t("p",[v._v("www.lubai.com/index.html/#/parent")]),v._v(" "),t("p",[t("a",{attrs:{href:"#"}})]),v._v(" "),t("p",[v._v("location.hash = '#hash-change';")]),v._v(" "),t("h3",{attrs:{id:"history路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#history路由"}},[v._v("#")]),v._v(" history路由")]),v._v(" "),t("p",[v._v("hash虽然能解决问题, 但是带有#不太美观.")]),v._v(" "),t("p",[v._v("window.history.back();\nwindow.history.forward();\ngo(number)\npushState 新增 => A B => A B C\nreplaceState 覆盖/代替 A B => A C")]),v._v(" "),t("ol",[t("li",[v._v("可以使用Popstate事件来监听url变化")]),v._v(" "),t("li",[v._v("pushState和replaceState 并不会触发Popstate")]),v._v(" "),t("li",[v._v("哪些情况会触发popstate呢?\n"),t("ol",[t("li",[v._v("浏览器的回退/前进按钮")]),v._v(" "),t("li",[v._v("history back forward go")])])])]),v._v(" "),t("p",[v._v("参数")]),v._v(" "),t("ol",[t("li",[v._v("state: 是一个对象, 是一个与指定网址相关的状态对象. 如果不需要, 可以填null")]),v._v(" "),t("li",[v._v("title: 新页面的标题, null")]),v._v(" "),t("li",[v._v("url: 新的网址, 必须与当前页面处在同一个域, 浏览器的地址栏会显示这个网址")])]),v._v(" "),t("p",[v._v("部署history路由的时候, 要记住, 要使你路由中的所有Path都访问到index.html文件")]),v._v(" "),t("p",[v._v("www.lubai.com/green")]),v._v(" "),t("p",[v._v("www.lubai.com/index.html")]),v._v(" "),t("p",[v._v("nginx {")]),v._v(" "),t("p",[v._v("location  /green  {\nindex.html\n}\n}")])])}),[],!1,null,null,null);_.default=l.exports}}]);